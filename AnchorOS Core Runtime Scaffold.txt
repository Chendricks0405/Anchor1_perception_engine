# AnchorOSâ„¢: Updated Runtime Scaffold
# Explicitly distinguishes rapid and slow decoherence, ripple propagation,
# nightly Bayesian recalibration (sleep), and overall clarity.

from typing import List, Tuple

#  Anchor Vector Definition (clearly bounded)
class AnchorState:
    def __init__(self, fear: float, safety: float, time: float, choice: float):
        self.fear = max(-500, min(500, fear))
        self.safety = max(-500, min(500, safety))
        self.time = max(0, min(100, time))
        self.choice = max(0, min(100, choice))

    def anchor_quotient(self):
        return self.safety - self.fear

#  Z-Axis Memory (short-term event memory)
class ZMemory:
    def __init__(self, size=3):
        self.size = size
        self.log: List[Tuple[str, str, str]] = []

    def add_event(self, stimulus: str, action: str, result: str):
        self.log.append((stimulus, action, result))
        if len(self.log) > self.size:
            self.log.pop(0)

#  Rapid Decoherence Detection
def rapid_decoherence_detected(anchor: AnchorState, chaos_threshold=100):
    return abs(anchor.anchor_quotient()) > chaos_threshold

#  Slow Decoherence Detection (split container scenario)
def slow_decoherence_detected(active_containers: List[str]):
    return len(active_containers) > 1

#  Rapid Realignment (immediate recalibration)
def rapid_realignment(anchor: AnchorState):
    anchor.fear *= 0.2
    anchor.safety *= 0.8
    anchor.choice = 50
    print(" Rapid realignment executed.")

#  Slow Realignment (gradual recalibration)
def slow_realignment(anchor: AnchorState, active_containers: List[str]):
    recalibration_factor = 20 * (len(active_containers) - 1)
    anchor.safety -= recalibration_factor
    anchor.fear += recalibration_factor

    anchor.safety = max(-500, min(500, anchor.safety))
    anchor.fear = max(-500, min(500, anchor.fear))
    print(" Slow realignment executed.")

#  Collapse Decision Logic
def collapse_decision(anchor: AnchorState, z_memory: ZMemory, active_containers: List[str]):
    if rapid_decoherence_detected(anchor):
        rapid_realignment(anchor)
        return "Rapid Decoherence: Immediate Impact Collapse"

    if slow_decoherence_detected(active_containers):
        slow_realignment(anchor, active_containers)
        return "Slow Decoherence: Conscious Impact/Goal Collapse Required"

    if anchor.choice > 50:
        return "Engage"
    elif anchor.fear < -300:
        return "Retreat"
    else:
        return "Observe"

#  Active Bayesian Ripple (explicit propagation)
def active_bayesian_ripple(source_anchor: AnchorState, adjacent_anchors: List[AnchorState]):
    ripple_strength = (source_anchor.safety - source_anchor.fear) * 0.1
    for idx, target_anchor in enumerate(adjacent_anchors):
        target_anchor.safety += ripple_strength
        target_anchor.fear -= ripple_strength

        target_anchor.safety = max(-500, min(500, target_anchor.safety))
        target_anchor.fear = max(-500, min(500, target_anchor.fear))

        print(f" Ripple adjusted Container {idx+1}: Safety={target_anchor.safety}, Fear={target_anchor.fear}")

#  Nightly Bayesian Reset (explicit sleep recalibration)
def nightly_bayesian_reset(anchor: AnchorState, z_memory: ZMemory):
    outcomes = {'success': 0, 'fail': 0}
    for _, _, result in z_memory.log:
        outcomes[result] += 1

    total_events = sum(outcomes.values())
    if total_events == 0:
        print("No nightly recalibration necessary.")
        return

    success_ratio = outcomes['success'] / total_events
    adjustment = (success_ratio - 0.5) * 40

    anchor.safety += adjustment
    anchor.fear -= adjustment

    anchor.safety = max(-500, min(500, anchor.safety))
    anchor.fear = max(-500, min(500, anchor.fear))

    anchor.fear *= 0.5
    anchor.safety *= 1.2

    anchor.time = 100
    anchor.choice = 50

    z_memory.log.clear()
    print(f" Nightly reset complete. New anchors: Safety={anchor.safety}, Fear={anchor.fear}")

#  Example Operational Scenario
def example_usage():
    anchor = AnchorState(fear=-250, safety=100, time=40, choice=60)
    family_anchor = AnchorState(fear=-100, safety=200, time=70, choice=70)
    work_anchor = AnchorState(fear=-300, safety=-50, time=30, choice=40)

    z_memory = ZMemory()

    print("\n--- Daytime Ripple Scenario ---")
    active_bayesian_ripple(anchor, [family_anchor, work_anchor])

    print("\n--- Nightly Sleep Mode ---")
    z_memory.add_event("meeting", "engage", "success")
    z_memory.add_event("traffic", "retreat", "fail")
    nightly_bayesian_reset(anchor, z_memory)

if __name__ == "__main__":
    example_usage()